---
id: MANIPULATE_FEES
info:
  name: "Manipulate Fees in transactions"
  description: >
    "This test assesses how the application handles fee parameters in transaction requests, such as processing fees or service charges, to identify potential vulnerabilities that could allow fee manipulation. The objective is to determine whether the system correctly validates and calculates fees based on predefined rules, preventing unauthorized fee alterations."
  details: >
    "The test focuses on scenarios where users or attackers attempt to modify fee values in transaction requests, such as setting the fee to zero or an incorrect amount. By submitting different requests with varied fee values, such as `fee: 30` or `fee: 0`, the test checks if the application properly enforces fee requirements and calculates the total amount paid accordingly. The goal is to ensure that the system consistently applies the correct fees based on the payment method, transaction type, or other predefined criteria and prevents any unauthorized changes."
  impact: >
    "Improper handling of fees can lead to financial losses for the business, as attackers or users may bypass fee requirements, resulting in reduced revenue. If the application does not enforce accurate fee calculations, it could lead to discrepancies in billing, loss of trust from customers, and potential regulatory issues. Ensuring robust validation and handling of fees is crucial to maintain financial integrity, prevent revenue leakage, and protect the organization's financial interests."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: MANIPULATE_FEES
  severity: LOW
  tags:
  - Business logic
  - OWASP top 10
  - HackerOne top 10
  references:
  - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
  - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
  - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
  - CWE-20
  cve:
  - CVE-2018-20679
  - CVE-2019-14271
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    not_contains:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts

    # Here we check for the modified values of contextual keys in response.
    for_one:
      key:
        regex: "${probableOutputParameters}"
        extract: outputUserKey
      value:
        extract: outputUserValue
  or:
  # In case the amount is being sent as a number
  - request_payload:
      for_one:
        key:
          regex: "${probableInputParameters}"
          extract: userKey
        value:
          datatype: number
          extract: userVal
  # In case the amount is being sent as a string
  - request_payload:
      for_one:
        key:
          regex: "${probableInputParameters}"
          extract: userKey2
        value:
          regex: "\b([1-9][0-9]*)\b"
          extract: userVal2
wordLists:
  probableInputParameters:
    - fees
    - fee
    - charge
    - serviceFee
    - processingFee
    - handlingFee
    - surcharge
    - additionalCharge
    - transactionFee
    - extraCost
    - cost

  probableOutputParameters:
    - transactionAmount
    - amount
    - finalAmount
    - balance
    - paid
    - bill
    - totalAmount
    - totalPaid
    - payableAmount
    - netAmount
    - invoiceAmount
    - dueAmount

execute:
  type: single
  requests:
  - req:
    - modify_body_param:
        userKey: 0
    - modify_body_param:
        userKey2: "0"

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"
    for_one:
      key:
        eq: "${outputUserKey}"
      value:
        neq: "${outputUserValue}"

